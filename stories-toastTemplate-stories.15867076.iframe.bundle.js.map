{"version":3,"file":"stories-toastTemplate-stories.15867076.iframe.bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;ACaA;;;;AAIA;;;;;;;;;;AAUA;;AAEA;AAOA;;;;AAMA;;;AAKA;AACA;;AAIA;AACA;;AAIA;;;;;;;;AAQA;;AClDA;;;;;;;ACHA;;;;;;AA6BA;AAIA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AChDA;AACA;AAGA;ADKA;;;AAGA;;;;AAIA;;ACXA;;;ADiBA;;;;AAIA;;ACrBA;AACA;AAGA;AACA;;;AClBA;;;AAOA;;;AAKA;;;AAKA;;;AAKA;;;;;;;ACdA;;;;;;;;;ACHA;ACFA","sources":["webpack://toastify-lib/./src/assets/colors.ts","webpack://toastify-lib/./src/components/Toast/styled.ts","webpack://toastify-lib/./src/components/Toast/Toast.tsx","webpack://toastify-lib/./src/utils/animationSettings.ts","webpack://toastify-lib/./src/utils/animations.ts","webpack://toastify-lib/./src/utils/getPosition.ts","webpack://toastify-lib/./src/components/ErrorBoundary/styled.ts","webpack://toastify-lib/./src/components/ToastList/styled.ts","webpack://toastify-lib/./src/components/ToastList/ToastList.tsx"],"sourcesContent":["export const colors = {\r\n  white: '#FFFFFF',\r\n  purple: '#9A40D3',\r\n  lightGray: '#00000029',\r\n  gray: '#707070',\r\n  yellow: '#F4E048',\r\n  black: '#000000',\r\n  red: '#E25837',\r\n  green: '#37E29A',\r\n};\r\n","import styled from 'styled-components';\nimport { IToastBoxProps } from '@interfaces';\nimport { fadeAnimation, slideAnimation } from '@utils';\n\nconst fontSettings = `\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: 31.5rem;\n  margin-left: 2rem;\n`;\n\nexport const ToastBox = styled.div<IToastBoxProps>`\n  background: ${({ backgroundColor }) => backgroundColor};\n  width: 45rem;\n  height: 10rem;\n  font-size: 2.2rem;\n  color: ${({ textColor }) => textColor};\n  border-radius: 2.4rem;\n  box-shadow: 0.4rem 0.4rem 0.8rem #00000029;\n  display: flex;\n  position: relative;\n\n  margin-bottom: 1rem;\n  & svg {\n    height: 3rem;\n    width: 3rem;\n    fill: ${({ textColor }) => textColor};\n  }\n  ${({ toastDuration, animationType, slideDirection }) => {\n    return animationType === 'fade'\n      ? fadeAnimation(toastDuration)\n      : slideAnimation(toastDuration, slideDirection);\n  }}\n`;\n\nexport const ToastContent = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 2rem;\n`;\n\nexport const TextBox = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ToastTitle = styled.span`\n  ${fontSettings};\n  margin-bottom: 1rem;\n`;\n\nexport const ToastDescription = styled.span`\n  ${fontSettings};\n  font-size: 1.6rem;\n`;\n\nexport const CloseButton = styled.button<{ color: string }>`\n  position: absolute;\n  top: 2rem;\n  right: 2rem;\n  cursor: pointer;\n  & svg {\n    height: 1.5rem;\n    width: 1.5rem;\n    fill: ${({ color }) => color};\n  }\n`;\n","import React from 'react';\nimport { GlobalStyle } from '@assets';\nimport { SvgSelector } from '@components/SvgSelector';\nimport { IToastConfig } from '@interfaces';\nimport { toast } from '@service/toastManager';\n\nimport {\n  CloseButton,\n  TextBox,\n  ToastBox,\n  ToastContent,\n  ToastDescription,\n  ToastTitle,\n} from './styled';\n\nexport const Toast = (props: IToastConfig) => {\n  const {\n    title,\n    description,\n    toastType,\n    textColor,\n    backgroundColor,\n    position,\n    animationType,\n    id,\n    toastDuration,\n    slideDirection,\n  } = props;\n\n  const closeToast = (id: string) => () => {\n    toast.deleteToast(id);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <ToastBox\n        data-cy=\"toast\"\n        animationType={animationType}\n        textColor={textColor}\n        position={position}\n        animation={position}\n        backgroundColor={backgroundColor}\n        toastDuration={toastDuration}\n        slideDirection={slideDirection}\n      >\n        <ToastContent>\n          <SvgSelector data-cy=\"svg\" id={toastType} />\n          <TextBox>\n            <ToastTitle data-cy=\"title\">{title}</ToastTitle>\n            <ToastDescription data-cy=\"description\">{description}</ToastDescription>\n          </TextBox>\n        </ToastContent>\n        <CloseButton data-cy=\"close-toast\" color={textColor} onClick={closeToast(id!)}>\n          <SvgSelector id=\"close\" />\n        </CloseButton>\n      </ToastBox>\n    </>\n  );\n};\n","import { css, keyframes } from 'styled-components';\r\nimport { SlideDirections, slideSpeedAmount } from '@constants';\r\n\r\nexport const fadeAnimationStart = keyframes`\r\n  from {\r\n    opacity: 0;\r\n  }\r\n  to {\r\n    opacity: 1;\r\n  }\r\n`;\r\n\r\nexport const fadeAnimationEnd = keyframes`\r\n  from {\r\n    opacity: 1;\r\n  }\r\n  to {\r\n    opacity: 0;\r\n  }`;\r\n\r\nexport const slideAnimationStart = (direction: SlideDirections) => keyframes`\r\n  from {\r\n    opacity: 0;\r\n    ${slidePosition(direction, slideSpeedAmount)}\r\n  } \r\n  to {\r\n    opacity: 1;\r\n    ${slidePosition(direction, 0)}\r\n  }\r\n`;\r\nexport const slideAnimationEnd = (direction: SlideDirections) => keyframes`\r\n  from {\r\n    opacity: 1;\r\n    ${slidePosition(direction, 0)}\r\n  }\r\n  to {\r\n    opacity: 0;\r\n    ${slidePosition(direction, slideSpeedAmount)}\r\n  }\r\n`;\r\n\r\nconst slidePosition = (direction: SlideDirections, animationSpeed: number) => {\r\n  switch (direction) {\r\n    case SlideDirections.top:\r\n      return css`\r\n        transform: translate(0, ${-animationSpeed}rem);\r\n      `;\r\n    case SlideDirections.left:\r\n      return css`\r\n        transform: translate(${-animationSpeed}rem, 0);\r\n      `;\r\n    case SlideDirections.right:\r\n      return css`\r\n        transform: translate(${animationSpeed}rem, 0);\r\n      `;\r\n    case SlideDirections.bottom:\r\n      return css`\r\n        transform: translate(0, ${animationSpeed}rem);\r\n      `;\r\n    default:\r\n      return css``;\r\n  }\r\n};\r\n","import { css } from 'styled-components';\r\nimport { delay, SlideDirections } from '@constants';\r\n\r\nimport {\r\n  fadeAnimationEnd,\r\n  fadeAnimationStart,\r\n  slideAnimationEnd,\r\n  slideAnimationStart,\r\n} from './animationSettings';\r\n\r\nexport const fadeAnimation = (duration: number) => css`\r\n  animation-name: ${fadeAnimationStart}, ${fadeAnimationEnd};\r\n  ${makeSmoothAnimation(duration)};\r\n`;\r\n\r\nexport const slideAnimation = (duration: number, direction: SlideDirections) => css`\r\n  animation-name: ${slideAnimationStart(direction)}, ${slideAnimationEnd(direction)};\r\n  ${makeSmoothAnimation(duration)}\r\n`;\r\n\r\nconst makeSmoothAnimation = (duration: number) => css`\r\n  animation-delay: 0s, ${duration - delay}ms;\r\n  animation-duration: 500ms, 500ms;\r\n  animation-fill-mode: forwards, forwards;\r\n`;\r\n","import { css, FlattenSimpleInterpolation } from 'styled-components';\r\nimport { Positions } from '@constants';\r\n\r\nexport const getPosition = (position: Positions): FlattenSimpleInterpolation => {\r\n  switch (position) {\r\n    case Positions.TopLeft:\r\n      return css`\r\n        top: 1.5rem;\r\n        left: 1.5rem;\r\n      `;\r\n    case Positions.TopRight:\r\n      return css`\r\n        top: 1.5rem;\r\n        right: 1.5rem;\r\n      `;\r\n    case Positions.BottomLeft:\r\n      return css`\r\n        bottom: 1.5rem;\r\n        left: 1.5rem;\r\n      `;\r\n    case Positions.BottomRight:\r\n      return css`\r\n        bottom: 1.5rem;\r\n        right: 1.5rem;\r\n      `;\r\n    default:\r\n      return css``;\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const ErrorWrapper = styled.div`\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  position: absolute;\r\n  font-family: 'Roboto Mono', monospace;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ErrorText = styled.h3`\r\n  color: #000;\r\n  font-size: 3.4rem;\r\n  letter-spacing: 0.2px;\r\n  margin-bottom: 3rem;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Positions } from '@constants';\r\nimport { getPosition } from '@utils';\r\n\r\nexport const ToastListBox = styled.div<{ position: Positions }>`\r\n  position: fixed;\r\n  display: flex;\r\n  flex-direction: column;\r\n  ${({ position }) => getPosition(position)}\r\n`;\r\n","import React from 'react';\nimport { Toast } from '@components/Toast';\nimport { useToasts } from '@hooks';\n\nimport { ToastListBox } from './styled';\n\nexport const ToastList = () => {\n  const containerPositions = useToasts();\n\n  return (\n    <div>\n      {containerPositions.length > 0 &&\n        containerPositions.map(([position, toasts]) => {\n          return (\n            <ToastListBox data-cy=\"toasts-container\" key={position} position={position}>\n              {toasts.map(\n                ({\n                  title,\n                  description,\n                  position,\n                  toastType,\n                  animationType,\n                  id,\n                  backgroundColor,\n                  textColor,\n                  toastDuration,\n                  slideDirection,\n                }) => {\n                  return (\n                    <Toast\n                      key={id}\n                      title={title}\n                      description={description}\n                      toastType={toastType}\n                      backgroundColor={backgroundColor}\n                      position={position}\n                      textColor={textColor}\n                      animationType={animationType}\n                      toastDuration={toastDuration}\n                      slideDirection={slideDirection}\n                      id={id}\n                    />\n                  );\n                },\n              )}\n            </ToastListBox>\n          );\n        })}\n    </div>\n  );\n};\n"],"names":[],"sourceRoot":""}